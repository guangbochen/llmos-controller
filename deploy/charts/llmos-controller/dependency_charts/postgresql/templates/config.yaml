---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "postgresql.fullname" . }}
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
stringData:
  db_user: {{ .Values.config.user | quote }}
  db_password: {{ .Values.config.password | quote }}
  db_name: {{ .Values.config.db_name | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgresql.fullname" . }}-script
data:
  "init.sh": |
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset
    set -o pipefail

    # Ensure PGDATA is set
    if [[ -z "${PGDATA:-}" ]]; then
      echo "Error: PGDATA variable is not set."
      exit 1
    fi

    # Check if the directory exists
    if [[ ! -d "$PGDATA" ]]; then
      echo "PGDATA directory does not exist. Creating directory: $PGDATA"
      mkdir -p "$PGDATA"
      chown 9999:9999 "$PGDATA"
      echo "Directory created and ownership set to 9999:9999"
    else
      echo "PGDATA directory already exists: $PGDATA"
      if [[ ! -w "$PGDATA" ]]; then
        echo "Error: PGDATA directory is not writable."
        exit 1
      fi
    fi

    echo "PostgreSQL setup script completed successfully."

  "probe.sh": |
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset
    set -o pipefail
    # Ensure required environment variables are set
    if [[ -z "${POSTGRES_USER:-}" ]]; then
      echo "Error: POSTGRES_USER variable is not set."
      exit 1
    fi

    if [[ -z "${POSTGRES_DB:-}" ]]; then
      echo "Error: POSTGRES_DB variable is not set."
      exit 1
    fi

    # Run the probe command
    if psql --no-password --username="${POSTGRES_USER}" --dbname="${POSTGRES_DB}" --command="SELECT 1" >/dev/null 2>&1; then
      echo "PostgreSQL probe succeeded."
    else
      echo "PostgreSQL probe failed."
      exit 1
    fi
