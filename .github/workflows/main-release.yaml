name: main-release

concurrency:
  group: main-release
  cancel-in-progress: true

on:
  push:
    branches:
    - main

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ${{ vars.REGISTRY || 'ghcr.io/llmos-ai' }}
  VERSION: ${{ github.ref_name }}

jobs:
  main-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        buildkitd-flags: --debug
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - run: make test && make lint
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean --snapshot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Push Latest(main) Docker Images
      run: |
        IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep llmos-operator:${{ env.VERSION }})
        for i in ${IMAGES}; do
          docker push $i
        done
        docker manifest create ${{ env.REGISTRY }}/llmos-operator:${{ env.VERSION }} ${IMAGES}
        docker manifest push ${{ env.REGISTRY }}/llmos-operator:${{ env.VERSION }}
    - name: Push Latest(main) Webhook Images
      run: |
        IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep llmos-operator-webhook:${{ env.VERSION }})
        for i in ${IMAGES}; do
          docker push $i
        done
        docker manifest create ${{ env.REGISTRY }}/llmos-operator-webhook:${{ env.VERSION }} ${IMAGES}
        docker manifest push ${{ env.REGISTRY }}/llmos-operator-webhook:${{ env.VERSION }}
    - name: Failure Slack Notification
      if: failure()
      id: slack-failure
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: "${{ secrets.SLACK_BOT_FAILURE_CHANNEL }}"
        slack-message: "‚ùå Main-Release failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
